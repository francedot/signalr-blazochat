@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.ObjectModel
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<EditForm Model="newChatMessage" OnValidSubmit="Send">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Name</label>
        <InputText class="form-control" @bind-Value="newChatMessage.Name"/>
    </div>

    <div class="form-group">
        <label>Message</label>
        <InputTextArea class="form-control" @bind-Value="newChatMessage.Message"/>
    </div>

    <button type="submit" disabled="@(!IsConnected)">Send</button>
</EditForm>

<hr>

<ul>
    <Virtualize Items="messages" Context="message">
        <li>@message.Name says @message.Message</li>
    </Virtualize>
</ul>

@code {
    private HubConnection hubConnection;
    private List<ChatMessage> messages = new List<ChatMessage>();
    ChatMessage newChatMessage = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<ChatMessage>("ReceiveMessage", (message) =>
        {
            messages.Add(message);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send()
    {
        try
        {
            await hubConnection.InvokeAsync("SendMessage", 
                newChatMessage);
        }
        catch (Exception ex)
        {                
        }
    }
        

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}